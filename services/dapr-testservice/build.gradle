plugins {
    alias(libs.plugins.springBoot)
    alias(libs.plugins.springDependencyManagement)
    id 'java'
    alias(libs.plugins.docker)
    id 'checkstyle'
    alias(libs.plugins.sonarqube)
    id 'jacoco'
    alias(libs.plugins.gitProperties)
}

group = 'com.mybank'
version = '0.1.0'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation libs.springDoc
    implementation libs.logstash
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "com.hdfc:common-objects"
    implementation "com.hdfc:logging-utils"
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.hdfc:archunit-tests'
    implementation 'io.dapr:dapr-sdk:1.8.0'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport

sonarqube {
    properties {
        property 'sonar.exclusions', "**/com/mybank/daprtestservice/domain/**,**/com/mybank/daprtestservice/config/**,**/com/mybank/daprtestservice/repository/**"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "failed", "skipped")
    }
}

docker {
    dependsOn bootJar
    name "${project.group}-${jar.archiveBaseName.get()}:${version}"
    copySpec.from("build/libs").into("libs")
    dockerfile file('src/main/resources/docker/Dockerfile')
}

tasks.withType(Checkstyle){
    configFile file('codequality/checkstyle.xml')
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "IST"
}

springBoot {
    buildInfo()
}