# Ordering of each element inside blocks is alphabetic
[versions]
annotations = "23.0.0"
aop = "1.9.7"
apacheCommons3 = "3.12.0"
archunit = "0.22.0"
assertj = "3.22.0"
bindApi = "2.3.2"
dbScheduler = "10.5"
docker = "0.32.0"
feignJackson = "8.18.0"
gitProperties = "2.3.2"
gson = "2.9.0"
hibernateTypes = "2.14.0"
jackson = "2.14.0"
jacksonDatabind = "2.14.0"
jacksonDataformatXml = "2.14.0"
jacksonDatatypeJsr310 = "2.13.1"
java = "17"
javaTuples = "1.2"
jaxb = "2.3.1"
jaxbCore = "2.3.0.1"
jaxwsApi = "2.3.1"
jedis="3.7.1"
json = "20180813"
jsonPath = "2.7.0"
jsoup = "1.15.3"
junit = "5.8.2"
jwsApi = "1.1"
kafka = "2.8.7"
logstash = "7.0.1"
lombok = "1.18.22"
mockitoInline = "4.3.1"
mustache = "0.9.10"
ojdbc8 = "12.2.0.1"
okhttp = "4.9.3"
opensaml = "2.6.4"
openws = "1.5.4"
saajImpl = "1.5.1"
semver4j = "3.1.0"
servlet = "4.0.1"
sl4j = "1.7.35"
snakeyaml = "1.33"
sonarqube = "3.3"
spring = "5.3.21"
springBoot = "2.7.5"
springCloud = "2021.0.3"
springCloudNetflixHystrix = "2.2.10.RELEASE"
springDataEnvers = "2.7.1"
springDependencyManagement = "1.0.11.RELEASE"
springDoc = "1.6.5"
springWsCore = "3.1.1"
testContainers = "1.16.3"
wiremockJre8Standalone = "2.32.0"
woodstox = "6.4.0"
embeddedRedis = "0.7.3"

[libraries]
annotations = { module = "org.jetbrains:annotations", version.ref = "annotations" }
apacheCommons3 = { module = "org.apache.commons:commons-lang3", version.ref = "apacheCommons3" }
archunit = { module = "com.tngtech.archunit:archunit-junit5", version.ref = "archunit" }
archunitApi = { module = "com.tngtech.archunit:archunit-junit5-api", version.ref = "archunit" }
aspectjrt = { module = "org.aspectj:aspectjrt", version.ref = "aop" }
aspectjweaver = { module = "org.aspectj:aspectjweaver", version.ref = "aop" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
bindApi = { module = "jakarta.xml.bind:jakarta.xml.bind-api", version.ref = "bindApi" }
dbScheduler = { module = "com.github.kagkarlsson:db-scheduler-spring-boot-starter", version.ref = "dbScheduler" }
feignJackson = { module = "com.netflix.feign:feign-jackson", version.ref = "feignJackson" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
hibernateTypes = { module = "com.vladmihalcea:hibernate-types-55", version.ref = "hibernateTypes" }
jackson = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jacksonDatabind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jacksonDatabind" }
jacksonDataformatXml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-xml", version.ref = "jacksonDataformatXml" }
jacksonDatatypeJsr310 = {module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref="jacksonDatatypeJsr310"}
javaTuples = { module = "org.javatuples:javatuples", version.ref = "javaTuples" }
jaxbXjc = { module = "com.sun.xml.bind:jaxb-xjc", version.ref = "jaxb" }
jaxbImpl = { module = "com.sun.xml.bind:jaxb-impl", version.ref = "jaxb" }
jaxbApi = { module = "javax.xml.bind:jaxb-api", version.ref = "jaxb" }
jaxbCore = { module = "org.glassfish.jaxb:jaxb-core", version.ref = "jaxbCore" }
jaxwsApi = { module = "javax.xml.ws:jaxws-api", version.ref = "jaxwsApi" }
jwsApi = { module = "javax.jws:javax.jws-api", version.ref = "jwsApi" }
jedis = { module = "redis.clients:jedis", version.ref = "jedis" }
json = { module = "org.json:json", version.ref = "json" }
jsonPath = { module = "com.jayway.jsonpath:json-path", version.ref = "jsonPath" }
jsoup = { module = "org.jsoup:jsoup", version.ref = "jsoup" }
junitApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junitEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junitTestContainer = { module = "org.testcontainers:junit-jupiter", version.ref = "testContainers" }
kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "kafka" }
kafkaTest = { module = "org.springframework.kafka:spring-kafka-test", version.ref = "kafka" }
logstash = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash" }
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
mockitoInline = { module = "org.mockito:mockito-inline", version.ref = "mockitoInline" }
mustache = { module = "com.github.spullara.mustache.java:compiler", version.ref = "mustache" }
ojdbc8 = { module = "com.oracle.database.jdbc:ojdbc8", version.ref = "ojdbc8" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttpMockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }
opensaml = { module = "org.opensaml:opensaml", version.ref = "opensaml" }
openws = { module = "org.opensaml:openws", version.ref = "openws" }
postgresTestContainer = { module = "org.testcontainers:postgresql", version.ref = "testContainers" }
redis = { module = "org.springframework.boot:spring-boot-starter-data-redis", version.ref = "springBoot" }
saajImpl = { module = "com.sun.xml.messaging.saaj:saaj-impl", version.ref = "saajImpl" }
semver4j = { module = "com.vdurmont:semver4j", version.ref = "semver4j" }
servlet = { module = "javax.servlet:javax.servlet-api", version.ref = "servlet" }
sl4j = { module = "org.slf4j:slf4j-api", version.ref = "sl4j" }
sl4jSimple = { module = "org.slf4j:slf4j-simple", version.ref = "sl4j" }
snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "snakeyaml" }
spring = { module = "org.springframework:spring-framework-bom", version.ref = "spring" }
springAutoConfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "springBoot" }
springBoot = { module = "org.springframework.boot:spring-boot", version.ref = "springBoot" }
springBootTest = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springBoot" }
springCloud = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloud" }
springCloudNetflixHystrix = { module = "org.springframework.cloud:spring-cloud-starter-netflix-hystrix", version.ref = "springCloudNetflixHystrix" }
springDataEnvers = { module = "org.springframework.data:spring-data-envers", version.ref = "springDataEnvers" }
springDoc = { module = "org.springdoc:springdoc-openapi-ui", version.ref = "springDoc" }
springOauth2 = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server", version.ref = "springBoot" }
springStarterAop = { module = "org.springframework.boot:spring-boot-starter-aop", version.ref = "springBoot" }
springStarterCache = { module = "org.springframework.boot:spring-boot-starter-cache", version.ref = "springBoot" }
springStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "springBoot" }
springWsCore = { module = "org.springframework.ws:spring-ws-core", version.ref = "springWsCore" }
wiremockJre8Standalone = { module = "com.github.tomakehurst:wiremock-jre8-standalone", version.ref = "wiremockJre8Standalone" }
woodstox = { module = "com.fasterxml.woodstox:woodstox-core", version.ref = "woodstox" }
embeddedRedis = { module = "it.ozimov:embedded-redis", version.ref = "embeddedRedis"}

[plugins]
docker = { id = "com.palantir.docker", version.ref = "docker" }
gitProperties = { id = "com.gorylenko.gradle-git-properties", version.ref = "gitProperties" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
springBoot = { id = "org.springframework.boot", version.ref = "springBoot" }
springDependencyManagement = { id = "io.spring.dependency-management", version.ref = "springDependencyManagement" }


[bundles]
aopDeps = ["aspectjweaver", "aspectjrt"]
testContainerDeps = ["postgresTestContainer", "junitTestContainer"]
testSpringBootDeps = ["assertj", "springBootTest"]
jaxws = ["jaxwsApi","jwsApi","saajImpl","bindApi"]
jaxb = ["jaxbApi","jaxbCore","jaxbImpl","jaxbXjc"]
